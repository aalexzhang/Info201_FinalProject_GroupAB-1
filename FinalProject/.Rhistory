geom_line(aes(x = x, y =y))
# Filter data
wa_parks <- np_data %>%
filter(ParkName %in%
c("Mount Rainier NP", "Olympic NP", "North Cascades NP")) %>%
filter(Year >= 2018)
# Regular stacked bar chart
ggplot(data = wa_parks) +
geom_col(aes(x = Year,
y = RecreationVisits,
fill = ParkName))
# Relative stacked bar chart
ggplot(data = wa_parks) +
geom_col(aes(x = Year,
y = RecreationVisits,
fill = ParkName),
position = "fill")
# Grouped bar chart
ggplot(data = wa_parks) +
geom_col(aes(x = Year,
y = RecreationVisits,
fill = ParkName),
position = "dodge")
# Line plot
ggplot(data = wa_parks) +
geom_line(aes(x = Year,
y = RecreationVisits,
color = ParkName))
# Line plot — facet wrap
ggplot(data = wa_parks) +
geom_line(aes(x = Year,
y = RecreationVisits,
color = ParkName)) +
facet_wrap(~ParkName)
# Histogram -- all National Park data
ggplot(data = np_data) +
geom_histogram(aes(x = RecreationVisits))
# Label example
sample_data <- data.frame(x = c(1,2,3,4,5,6), y = c(1, 2, 5, 10, 4, 0))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = x, y =y))
View(sample_data)
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = "x axis", y = "y axis"))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes("x axis" = x, "y axis" =y))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = x, y =y))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = x axis, y =y axis))
# Grouped bar chart
ggplot(data = wa_parks) +
geom_col(aes(x = Year,
y = RecreationVisits,
fill = ParkName),
position = "dodge")
# Line plot
ggplot(data = wa_parks) +
geom_line(aes(x = Year,
y = RecreationVisits,
color = ParkName))
# Line plot — facet wrap
ggplot(data = wa_parks) +
geom_line(aes(x = Year,
y = RecreationVisits,
color = ParkName)) +
facet_wrap(~ParkName)
# Histogram -- all National Park data
ggplot(data = np_data) +
geom_histogram(aes(x = RecreationVisits))
# Label example
sample_data <- data.frame(x = c(1,2,3,4,5,6), y = c(1, 2, 5, 10, 4, 0))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = x, y = y))
# Add a title and x, y axes to this plot
# Then export and share!!!
ggplot(data = sample_data) +
geom_line(aes(x = x, y = y)) + xlab("x-axis") + ylab("y-axis") + ggtitle("Line graph of sample data")
source("C:/Users/alexz/OneDrive/Desktop/Info201/Exercise7/week-7-exercises-aalexzhang/Chart-Examples.R", echo=TRUE)
# Install maps package
install.packages("maps")
install.packages("mapproj")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# The code below will match any state abbreviation to the state name
state.name
state.abb
# Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>%
group_by(state_fullname) %>%
summarize(total = sum(RecreationVisits))
# Join the `state_shape` and `np_state_data` dataframes as
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data,
by = c("region" = "state_fullname"))
# Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
# Make a choropleth map of total recreation visits by state
# Add custom colors
# Add abbreviation for millions
library("scales")
?label_number_si()
# Make a choropleth map of total recreation visits by state
# Add custom colors
# Add abbreviation for millions
library("scales")
?label_number_si()
ggplot(np_state_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
View(np_state_data)
View(np_state_shape_data)
ggplot(np_state_data) +
geom_polygon(mapping = aes(x = state_fullname,
y = total,
group = group,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
ggplot(np_state_data) +
geom_polygon(mapping = aes(x = state_fullname,
y = total,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
color = "white",
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
color = "white",
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
?label_number_si()
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
color = "white",
fill = total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits') +
label_number_si(unit = "mil. visits")
# Load data
# Data comes from the Open Brewery Database
# https://github.com/openbrewerydb/openbrewerydb
brewery_db <- read.csv("https://github.com/openbrewerydb/openbrewerydb/blob/master/breweries.csv?raw=true", stringsAsFactors = FALSE)
View(brewery_db)
# Calculate the number of breweries in each state
# Save as state_brew
state_brew <-
brewery_db %>%
group_by(state) %>%
summarize(total = count(obdb_id))
# Calculate the number of breweries in each state
# Save as state_brew
state_brew <-
brewery_db %>%
group_by(state) %>%
summarize(total = n())
# Make states lowercase to ease joining
state_brew <- state_brew  %>%
mutate(state = tolower(state))
# Load state shapefile
state_shape <- map_data("state")
View(state_shape)
View(state_brew)
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <- merge(state_brew, state_shape)
View(brew_shape)
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <- 1
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <-
state_brew %>%
mutate(state_shape)
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <-
state_shape %>%
group_by(region) %>%
summarize(total = n()) %>%
mutate(state_brew)
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <-
state_shape %>%
group_by(region) %>%
summarize(total = n())
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <-
left_join(state_shape, state_brew, by = c("region" = "region"))
# Join state_brew and state_shape
# Save as brew_shape
brew_shape <-
left_join(state_shape, state_brew, by = c("region" = "state"))
# Make a choropleth map of the number of breweries in each state
# Add a meaningful title
# Add a new color scheme
ggplot(brew_shape) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total)) +
coord_map() +
labs(title = 'Number of breweries by state', fill = 'total')
banned_items_db <- read.csv("https://github.com/the-pudding/data/blob/master/dress-codes/banned_items.csv", stringsAsFactors = FALSE)
View(banned_items_db)
banned_items_db <- read.csv("https://github.com/the-pudding/data/blob/master/dress-codes/banned_items.csv")
setwd("~/")
setwd("C:/Users/alexz/OneDrive/Desktop/Info201/FinalProject")
library(readr)
banned_items <- read_csv("data/dress-codes/banned_items.csv")
View(banned_items)
banned_items_db <- banned_items
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n())
library(tidyverse)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n())
View(top10)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
slice(1:10)
top10
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n())
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(total)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(total) %>%
slice(-1:-10)
top10
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(total) %>%
slice(1:10)
top10
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(total)
top10
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
slice(1:10)
top10
ggplot(data = top10) +
geom_bar(aes(x = item, y = total))
ggplot(data = top10) +
geom_bar(aes(x = item))
ggplot(data = top10) +
geom_histogram(aes(x = item, y = total))
source("C:/Users/alexz/OneDrive/Desktop/Info201/Exercise7/week-7-exercises-aalexzhang/Chart-Examples.R", echo=TRUE)
# Histogram -- all National Park data
ggplot(data = np_data) +
geom_histogram(aes(x = RecreationVisits))
ggplot(data = top10) +
geom_histogram(aes(x = item, fill = total))
ggplot(data = top10) +
geom_histogram(aes(x = item, fill = total, stat = "count"))
ggplot(data = top10) +
geom_bar(aes(x = item, fill = total))
ggplot(data = top10) +
geom_bar(aes(x = item))
ggplot(data = top10) +
geom_bar(aes(x = item, fill = total))
ggplot(data = top10, aes(x = item, y = total)) +
geom_bar()
ggplot(top10, aes(x = item, y = total)) +
geom_bar()
ggplot(top10, aes(fill = total, x = item, y = total)) +
geom_bar()
ggplot(top10, aes(fill = total, x = item, y = total)) +
geom_bar(stat = 'identity')
ggplot(top10, aes(x = item, y = total)) +
geom_bar(stat = 'identity')
ggplot(top10, aes(fill = total, x = item, y = total)) +
geom_bar(stat = 'identity')
ggplot(top10, aes(fill = total, x = item, y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3))
ggplot(top10, aes(fill = total, x = reorder(item, total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3))
ggplot(top10, aes(fill = total, x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3))
ggplot(top10, aes(fill = total, x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=2))
ggplot(top10, aes(fill = total, x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=1))
ggplot(top10, aes(fill = total, x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3))
ggplot(top10, aes(fill = total, x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
xlab("banned dress item") +
ylab("number of schools") +
ggtitle("Top 10 most frequently banned dress items")
ggplot(top10, aes(x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
xlab("banned dress item") +
ylab("number of schools") +
ggtitle("Top 10 most frequently banned dress items")
banned_items_db <- read.csv("https://github.com/the-pudding/data/blob/master/dress-codes/banned_items.csv", stringsAsFactors = FALSE)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
slice(1:10)
banned_items_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/banned_items.csv", stringsAsFactors = FALSE)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
slice(1:10)
ggplot(top10, aes(x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
xlab("banned dress item") +
ylab("number of schools") +
ggtitle("Top 10 most frequently banned dress items")
words_percentages_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/words_percentages.csv")
View(words_percentages_db)
install.packages("ggwordcloud")
library("ggwordcloud")
ggplot(words_percentages_db, aes(label = item)) +
geom_text_wordcloud()
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud()
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20)
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_size_area(max_size = 10)
library("ggwordcloud")
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_radius(range = c(0, 20), limits = c(0, NA))
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_radius(range = c(0, 10), limits = c(0, NA))
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_size_area(max_size = 10)
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud() +
scale_radius(range = c(0, 10), limits = c(0, NA))
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud(area_corr = TRUE) +
scale_radius(range = c(0, 10), limits = c(0, NA))
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud(area_corr = TRUE) +
scale_radius(range = c(0, 20), limits = c(0, NA))
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud(area_corr = TRUE) +
scale_radius(range = c(0, 20), limits = c(0, NA)) +
ggtitle("Word cloud of most used words to describe banned clothing items")
banned_items_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/banned_items.csv", stringsAsFactors = FALSE)
banned_items_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/clothes_percentages.csv", stringsAsFactors = FALSE)
banned_items_gender_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/clothes_percentages.csv", stringsAsFactors = FALSE)
banned_items_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/banned_items.csv", stringsAsFactors = FALSE)
top10 <-
banned_items_db %>%
group_by(item) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
slice(1:10)
ggplot(top10, aes(x = reorder(item, -total), y = total)) +
geom_bar(stat = 'identity') +
scale_x_discrete(guide = guide_axis(n.dodge=3)) +
xlab("banned dress item") +
ylab("number of schools") +
ggtitle("Top 10 most frequently banned dress items")
source("C:/Users/alexz/OneDrive/Desktop/Info201/FinalProject/graph2.R", echo=TRUE)
install.packages("ggwordcloud")
words_percentages_db <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dress-codes/words_percentages.csv")
ggplot(words_percentages_db, aes(label = item, size = percent)) +
geom_text_wordcloud(area_corr = TRUE) +
scale_radius(range = c(0, 20), limits = c(0, NA)) +
ggtitle("Word cloud of most used words to describe banned clothing items")
View(banned_items_gender_db)
by_gender <-
banned_items_db %>%
group_by(market) %>%
summarize(total = n())
by_gender <-
banned_items_gender_db %>%
group_by(market) %>%
summarize(total = n())
View(by_gender)
View(by_gender)
ggplot(by_gender, aes(x = market, y = total, fill = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0)
ggplot(by_gender, aes(x = market, y = total, fill = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
ggplot(by_gender, aes(x = market, y = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
ggplot(by_gender, aes(x = "", y = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
ggplot(by_gender, aes(x = "", y = total, fill = "group")) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
ggplot(by_gender, aes(x = "", y = total, fill = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
pie(by_gender)
pie(by_gender$total)
pie(by_gender$total, labels = by_gender$market)
pie(by_gender$total, labels = by_gender$market, border = "white")
pie(by_gender$total, labels = by_gender$market, border = "black")
pie(by_gender$total, labels = by_gender$market)
ggplot(by_gender, aes(x = "", y = total, fill = total)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme_void()
